% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/initialisation.R
\name{initialise}
\alias{initialise}
\title{Initialise The TikTak Algorithm}
\usage{
initialise(n, N, lb, ub, eval_f, test = NULL, num.cores = NULL, ...)
}
\arguments{
\item{n}{desired number of candidate points}

\item{N}{total number of candidate points to generate, must exceed \code{n}}

\item{lb, ub}{lower and upper bounds on parameters}

\item{eval_f}{the objective function to minimise}

\item{test}{optional test function (See details)}

\item{...}{additional arguments to pass to the eval_f}

\item{num_cores}{integer that specifies the number of cores to use}
}
\value{
A list with a matrix of \code{n} candidate points and a vector with
with the value of the objective function at each point.
}
\description{
This function generates the \code{n} candidate points.
}
\details{
This function generates a Sobol sequence of length \code{N}. These
\code{N} points are scaled using the specified parameter bounds. If
\code{test} is not \code{NULL} then the function is applied to the \code{N}
points. The function \code{test} should return a boolean vector. Points that
result in \code{test} returning \code{FALSE} are discarded before calculating
the value of the objective function at each point. After calculating the
objective function at each point, the \code{n} best points are identified.
}
\note{
Equality constraints pose a challenge for this implementation of the TikTak algorithm. It is improbable that the Sobol sequence will produce any values that satisfy the equality constraint. Hence, use with caution.
}
