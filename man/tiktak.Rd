% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tiktak.R
\name{tiktak}
\alias{tiktak}
\title{Implementation of The TikTak Method}
\usage{
tiktak(
  eval_f,
  n,
  lb,
  ub,
  N = n * 10,
  eval_grad_f = NULL,
  eval_g_ineq = NULL,
  eval_jac_g_ineq = NULL,
  eval_g_eq = NULL,
  eval_jac_g_eq = NULL,
  opts = list(),
  theta_min = 0.1,
  theta_max = 0.995,
  theta_pow = 0.5,
  num_cores = NULL,
  init_res = NULL,
  ...
)
}
\arguments{
\item{eval_f}{function that returns the value of the objective function. It can also return gradient information at the same time in a list with elements 'objective' and 'gradient' (see the documentation for the \code{nloptr} package).}

\item{n}{desired number of starting values. Ignored if \code{init_res} not \code{NULL}, though the user must still supply a value.}

\item{lb, ub}{vector with lower bounds (\code{lb}) and upper bounds (\code{ub}) of the parameters (use -Inf or Inf for parameters without lower or upper bounds), by default there are no bounds for any of the parameters.}

\item{N}{total number of candidate starting values. Must exceed \code{n}. Ignored if \code{init_res} not \code{NULL}.}

\item{eval_grad_f}{function that returns the value of the gradient of the objective function. Not all of the algorithms require a gradient.}

\item{eval_g_ineq}{function to evaluate (non-)linear inequality constraints that should hold in the solution. It can also return gradient information at the same time in a list with elements 'constraints' and 'jacobian' (see the documentation for the \code{nloptr} package).}

\item{eval_jac_g_ineq}{function to evaluate the jacobian of the (non-)linear inequality constraints that should hold in the solution.}

\item{eval_g_eq}{function to evaluate (non-)linear equality constraints that should hold in the solution. It can also return gradient information at the same time in a list with elements 'constraints' and 'jacobian' (see the documentation for the \code{nloptr} package).}

\item{eval_jac_g_eq}{function to evaluate the jacobian of the (non-)linear equality constraints that should hold in the solution.}

\item{opts}{list with options. The option 'algorithm' is required (see the documentation for the \code{nloptr} package).}

\item{theta_min}{minimum weight See \insertCite{arnoud2019;textual}{TikTakR}.}

\item{theta_max}{maximum weight. See \insertCite{arnoud2019;textual}{TikTakR}.}

\item{theta_pow}{parameter that controls rate of decay in weight. See \insertCite{arnoud2019;textual}{TikTakR}.}

\item{num_cores}{integer that specifies the number of cores to use during \code{initialise} step. Useful is \code{N} is large.}

\item{init_res}{an object produced by \code{initialise}. If \code{NULL} (default) then \code{titak} will run \code{initialise}.}

\item{...}{additional parameters to pass to the objective and constraint functions.}
}
\value{
The best result from performing \code{n} local searches.
}
\description{
The 'TikTak' multistart method, as described in \insertCite{arnoud2019;textual}{TikTakR}.
}
\note{
Equality constraints pose a challenge for this implementation of the TikTak algorithm. See \code{initialise} for an explanation.
}
\references{
\insertRef{arnoud2019}{TikTakR}
}
